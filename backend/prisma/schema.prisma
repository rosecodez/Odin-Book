generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model user {
    id                        Int                         @id @default(autoincrement())
    username                  String
    password                  String
    profile_image             String                      @default("https://res.cloudinary.com/dbmnceulk/image/upload/v1726786843/MessagingApp/xwhnyzgqeliffxa9lsrm.png")
    bio                       String                      @default("Nothing about this user yet")
    created_at                DateTime                    @default(now())
    likes                     likes[]
    posts                     posts[]
    messages                  message[]
    comments                  comments[]
    conversation_participants conversation_participants[]
}

model message {
    id              Int           @id @default(autoincrement())
    content         String
    created_at      DateTime      @default(now())
    conversation_id String
    sender_id       Int
    user            user?         @relation(fields: [userId], references: [id])
    userId          Int?
    conversation    conversation? @relation(fields: [conversationId], references: [id])
    conversationId  Int?
}

model conversation {
    id                        Int                         @id @default(autoincrement())
    created_at                DateTime
    conversation_participants conversation_participants[]
    messages                  message[]
}

model conversation_participants {
    id             Int           @id @default(autoincrement())
    user           user?         @relation(fields: [userId], references: [id])
    userId         Int?
    conversation   conversation? @relation(fields: [conversationId], references: [id])
    conversationId Int?
}

model comments {
    id         Int      @id @default(autoincrement())
    content    String
    created_at DateTime @default(now())
    user       user?    @relation(fields: [userId], references: [id])
    post       posts?   @relation(fields: [postsId], references: [id])
    userId     Int?
    postsId    Int?
}

model posts {
    id         Int        @id @default(autoincrement())
    content    String
    created_at DateTime   @default(now())
    user       user?      @relation(fields: [userId], references: [id])
    userId     Int?
    comments   comments[]
    likes      likes[]
}

model likes {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now())
    user       user?    @relation(fields: [userId], references: [id])
    userId     Int?
    posts      posts?   @relation(fields: [postsId], references: [id])
    postsId    Int?
}
